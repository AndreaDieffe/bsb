#!/usr/bin/env python3

if __file__[-12:] == "bin/scaffold" or __file__[-12:] == "bin\\scaffold":
	import os, sys
	print("Using test source code from", os.path.dirname(__file__)[0:-3])
	sys.path.insert(0, os.path.dirname(__file__)[0:-3])
import configparser
import builtins
import argparse
import scaffold
from scaffold.scaffold import Scaffold

##
## This is the high-level API: It receives a command from the CLI, which is translated
## to the scaffold python package and executed.
##

# Parse the command line arguments.

parser = argparse.ArgumentParser()

parser.add_argument("-c", "--config",
	help="Specify the path of the configuration file.",
	default="{}/configurations/mouse_cerebellum.json".format(scaffold.__path__[0])
)

parser.add_argument("-ct", "--ctype",
	help="Specify the type of the configuration file.",
	default="json",
	choices=["json"]
)

parser.add_argument("-v", "--verbose",
	help="Specify the verbosity of the console output",
	action="count",
	default=0
)

parser.add_argument("-o", "--output",
	help="Specify an output file path",
)

subparsers = parser.add_subparsers(
	title='Scaffold tasks',
	description='The scaffold performs multiple seperate tasks. See the list below for available tasks.',
	dest='task'
)

parser_compile = subparsers.add_parser('compile', help='Build a network of neurons in a volume.')
parser_compile.add_argument('-p', action='store_true',help='Plot the created network')

parser_run = subparsers.add_parser('run', help='Run a simulation from scratch.')
parser_run.add_argument('simulation', action='store', help='Preconfigured simulation to run.')
parser_run.add_argument('-p', action='store_true',help='Plot the created network')

parser_run = subparsers.add_parser('simulate', help='Run a simulation from a compiled HDF5 network architecture file.')
parser_run.add_argument('simulation', action='store', help='Name of the preconfigured simulation.')
parser_run.add_argument('--hdf5', action='store', required=True, help='Name of the HDF5 file to load.')

file = None
cl_args = parser.parse_args()
if hasattr(cl_args, 'hdf5'):
	cl_args.ctype = 'hdf5'
if cl_args.ctype == 'json':
	# Load the .json configuration
	scaffoldConfig = scaffold.config.JSONConfig(file=cl_args.config, verbosity=cl_args.verbose)
elif cl_args.ctype == 'hdf5':
	file = cl_args.hdf5
	scaffoldConfig = scaffold.config.from_hdf5(file)

# Create the scaffold instance
scaffoldInstance = Scaffold(scaffoldConfig, from_file=file)

if cl_args.output:
	scaffoldInstance.output_formatter.save_file_as = cl_args.output

if cl_args.task == 'compile' or cl_args.task == 'run':
	scaffoldInstance.compile_network()
	if cl_args.p:
		scaffoldInstance.plotNetworkCache()

if cl_args.task == 'run' or cl_args.task == 'simulate':
	scaffoldInstance.run_simulation(cl_args.simulation)
